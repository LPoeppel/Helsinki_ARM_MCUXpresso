/*
===============================================================================
 Name        : main.c
 Author      : $lpoeppel
 Version     : lab2ex3
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include "DigitalIoPin.h"

#include <cr_section_macros.h>

// TODO: insert other include files here
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "ITM_write.h"
// TODO: insert other definitions and declarations here

#include <string>
#include <time.h>
#include <cctype>
#include <string.h>

// Private types/enumerations/variables
//

//
// Public types/enumerations/variables
//

//
//  Private functions
//

// Sets up system hardware
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();
	Chip_RIT_Init(LPC_RITIMER);
	NVIC_SetPriority( RITIMER_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 1 );

//	 Initial greenLED0, redLED1, blueLED2 state is off
	Board_LED_Set(0, false);
	Board_LED_Set(1, false);
	Board_LED_Set(2, false);

}


volatile uint32_t RIT_count;
SemaphoreHandle_t sbRIT = NULL;
TaskHandle_t Task2 = NULL;
TaskHandle_t Task3 = NULL;
QueueHandle_t xQueue = NULL;
SemaphoreHandle_t mutex = NULL;

DigitalIoPin *DIR;
DigitalIoPin *PWR;
DigitalIoPin *leftLMS;
DigitalIoPin *rightLMS;
int pps = 4000;

void move(int value){
	for(int i = 0; i <= value; i++){
		PWR->write(true);
		vTaskDelay(1);
		PWR->write(false);
		vTaskDelay(1);
	}

}

void moveMid(){
	while(!rightLMS->read()){
		DIR->write(false);
		move(10);
	}
	int steps = 0;
	while (!leftLMS->read()) {
		DIR->write(true);
		move(1);
		steps++;
	}
	DIR->write(false);
	move(5);
	steps = steps-10;
	move(steps);
}
//
//  Public functions
//


void RIT_start(int count, int us){
 uint64_t cmp_value;
 // Determine approximate compare value based on clock rate and passed interval
 cmp_value = (uint64_t) Chip_Clock_GetSystemClockRate() * (uint64_t) us / 1000000;
 // disable timer during configuration
 Chip_RIT_Disable(LPC_RITIMER);
 RIT_count = count;
 // enable automatic clear on when compare value==timer value
 // this makes interrupts trigger periodically
 Chip_RIT_EnableCompClear(LPC_RITIMER);
 // reset the counter
 Chip_RIT_SetCounter(LPC_RITIMER, 0);
 Chip_RIT_SetCompareValue(LPC_RITIMER, cmp_value);
 // start counting
 Chip_RIT_Enable(LPC_RITIMER);
 // Enable the interrupt signal in NVIC (the interrupt controller)
 NVIC_EnableIRQ(RITIMER_IRQn);
 // wait for ISR to tell that we're done
 if(xSemaphoreTake(sbRIT, portMAX_DELAY) == pdTRUE) {
 // Disable the interrupt signal in NVIC (the interrupt controller)
	  NVIC_DisableIRQ(RITIMER_IRQn);
 }
 else {
//	 Board_UARTPutSTR("Error\r\n");
 }
}


 extern "C" {
 void RIT_IRQHandler(void){

  // This used to check if a context switch is required
  portBASE_TYPE xHigherPriorityWoken = pdFALSE;
  // Tell timer that we have processed the interrupt.
  // Timer then removes the IRQ until next match occurs
  Chip_RIT_ClearIntStatus(LPC_RITIMER); // clear IRQ flag

  if(RIT_count > 0) {
	  RIT_count--;
	  if(rightLMS->read() || leftLMS->read()){
		  PWR->write(false);
		  RIT_count = 0;
	   }else{
		  if(RIT_count%2){
			  PWR->write(false);
		  }else{
			  PWR->write(true);
		  }
	   }
  }else {
	  Chip_RIT_Disable(LPC_RITIMER); // disable timer
	  // Give semaphore and set context switch flag if a higher priority task was woken up
	  xSemaphoreGiveFromISR(sbRIT, &xHigherPriorityWoken);
  }
  // End the ISR and (possibly) do a context switch
  portEND_SWITCHING_ISR(xHigherPriorityWoken);
 }
 }




// the following is required if runtime statistics are to be collected
extern "C" {

void vConfigureTimerForRunTimeStats( void ) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}

}
// end runtime statictics collection



static void vTask1(void *pvParameters ){
	vTaskDelay(100);
	int input_i;
	char buffer[64];
	int pos = 0;
	Board_UARTPutSTR("Task1 online.\r\n");
	moveMid();
	while(1){
		input_i = Board_UARTGetChar();
		if(input_i != EOF){
			if(xSemaphoreTake(mutex, portMAX_DELAY) == pdTRUE){
				if(input_i == 13){
					buffer[pos] = '\r';
					buffer[pos+1] = '\n';
					buffer[pos+2] = 0;
					Board_UARTPutSTR(buffer);
					ITM_write(buffer);
					if(!strncmp(buffer, "GO", 2) || !strncmp(buffer, "go", 2)){
						xTaskNotifyGive(Task2);
					}else if(!strncmp(buffer, "stop", 4) || !strncmp(buffer, "STOP", 4)){
						xQueueSendToFront(xQueue, buffer, 10);
					}else{
						xQueueSendToBack(xQueue, buffer, 10);
					}
					std::fill_n(buffer, 64, 0);
					pos = 0;
				}else{
					buffer[pos] = input_i;
					pos++;
				}
			}
			xSemaphoreGive(mutex);
		}//!EOF
		vTaskDelay(5);
	}
}

static void vTask2(void *pvParameters ){
	vTaskDelay(100);

	while(1){
		char command[64];
		int value = 0;

		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
		while(xQueueReceive(xQueue, command, 10) == pdTRUE){
//		xSemaphoreTake(mutex, portMAX_DELAY);
			if(!strncmp(command, "STOP", 4) || !strncmp(command, "stop", 4)){
				PWR->write(false);
				ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
			}else if(!strncmp(command, "left", 4)){
				DIR->write(true);
				value = atoi(command+4);
				Board_UARTPutSTR("left ");
				Board_UARTPutSTR(std::to_string(value).c_str());
				Board_UARTPutSTR("\r\n");
				RIT_start(value, pps);
			}else if(!strncmp(command, "right", 5)){
				DIR->write(false);
				value = atoi(command+5);
				Board_UARTPutSTR("right ");
				Board_UARTPutSTR(std::to_string(value).c_str());
				Board_UARTPutSTR("\r\n");
				RIT_start(value, pps);
			}else if(!strncmp(command, "pps", 3)){
				value = atoi(command+3);
				Board_UARTPutSTR("New PPS value: ");
				Board_UARTPutSTR(std::to_string(value).c_str());
				Board_UARTPutSTR("\r\n");
				pps = value;
			}else{
				Board_UARTPutSTR("Error\r\n");
			}
		}
//		xSemaphoreGive(mutex);
	}
}



//
//  @brief	lab6, stepper motor
//  @return	Nothing, function should not exit
//
int main(void)
{
	prvSetupHardware();
	ITM_init();
	sbRIT = xSemaphoreCreateBinary();

	PWR = new DigitalIoPin(0, 24, DigitalIoPin::output, false);
	DIR = new DigitalIoPin(1, 0, DigitalIoPin::output, false);	//DIR false-> motor, true <- motor
	rightLMS = new DigitalIoPin(0, 28, DigitalIoPin::pullup, true);		//Boundary1 at motor
	leftLMS = new DigitalIoPin(0, 27, DigitalIoPin::pullup, true);		//Boundary2 opposite from motor

	xQueue = xQueueCreate(20, sizeof(char)*64);
	mutex = xSemaphoreCreateMutex();
	xTaskCreate(vTask1, "vTask1",
					configMINIMAL_STACK_SIZE + 256, NULL, (tskIDLE_PRIORITY + 1UL),
					(TaskHandle_t *) NULL);
	xTaskCreate(vTask2, "vTask2",
						configMINIMAL_STACK_SIZE + 256, NULL, (tskIDLE_PRIORITY + 1UL),
						&Task2);

//	 Start the scheduler
	vTaskStartScheduler();
//	 Should never arrive here
	return 1;
}

