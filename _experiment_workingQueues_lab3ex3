/*
===============================================================================
 Name        : main.c
 Author      : $lpoeppel
 Version     : lab2ex3
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include "DigitalIoPin.h"

#include <cr_section_macros.h>

// TODO: insert other include files here
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "ITM_write.h"
// TODO: insert other definitions and declarations here

#include <string>
#include <time.h>
#include <cctype>
/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();
	/* Initial greenLED0, redLED1, blueLED2 state is off */
	Board_LED_Set(0, false);
	Board_LED_Set(1, false);
	Board_LED_Set(2, false);

}

SemaphoreHandle_t mutex = NULL;
QueueHandle_t xQueue;
DigitalIoPin *SW1;

static void vTask2(void *pvParameters){
	SW1 = new DigitalIoPin(0, 17, DigitalIoPin::pullup, true);
	char const *output = "test\r\n";
	std::string input = "mystring\r\n";
	while(1){
		 if(SW1->read()){
			Board_LED_Set(0,false);
			Board_LED_Set(1,true);
			Board_LED_Set(2,false);
			char const *buffer = input.c_str();
			xQueueSendToBack(xQueue, &buffer , portMAX_DELAY );
			vTaskDelay(1000);
			xQueueReceive(xQueue, &output, portMAX_DELAY);
			vTaskDelay(1000);
			ITM_write(output);

			vTaskDelay(2000);
			Board_LED_Set(1,false);
		}
	}//while (1)
}//vTask2

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/* the following is required if runtime statistics are to be collected */
extern "C" {

void vConfigureTimerForRunTimeStats( void ) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}

}
/* end runtime statictics collection */

/**
 * @brief	lab2, semaphores
 * @return	Nothing, function should not exit
 */
int main(void)
{
	prvSetupHardware();
	ITM_init();

	mutex = xSemaphoreCreateMutex();
	xQueue = xQueueCreate(2, sizeof(char*));

	xTaskCreate(vTask2, "vTask2",
					configMINIMAL_STACK_SIZE + 128, NULL, (tskIDLE_PRIORITY + 2UL),
					(TaskHandle_t *) NULL);

	/* Start the scheduler */
	vTaskStartScheduler();
	/* Should never arrive here */
	return 1;
}
