/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <cr_section_macros.h>

// TODO: insert other include files here

// TODO: insert other definitions and declarations here

#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

#include "DigitalIoPin.h"
#include "ITM_write.h"

#define speed 1

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();

	/* Initial LED0 state is off */
	Board_LED_Set(0, false); //red
	Board_LED_Set(1, false); //green
	Board_LED_Set(2, false); //blue
}

DigitalIoPin *rightSW;
DigitalIoPin *leftSW;
DigitalIoPin *dir;
DigitalIoPin *power;

// PIN Task thread

void move(bool isLeft){
	dir->write(isLeft);

	power->write(true);
	vTaskDelay(speed);
	power->write(false);
	vTaskDelay(speed);
}

void stop(){
	power->write(false);
	vTaskDelay(2);
}

SemaphoreHandle_t binary = NULL;

static void vMotorTask(void *pvParameters) {

	rightSW = new DigitalIoPin(0, 28, DigitalIoPin::pullup, true);		//Boundary1 at motor
	leftSW = new DigitalIoPin(0, 27, DigitalIoPin::pullup, true);		//Boundary2 opposite from motor
	dir = new DigitalIoPin(1, 0, DigitalIoPin::output, false);			//DIR false-> motor, true <- motor
	power = new DigitalIoPin(0, 24, DigitalIoPin::output, false); 		//STEPP

	dir->write(false);
	if(xSemaphoreTake(binary, portMAX_DELAY) == pdFALSE){
		vTaskDelay(2);
	}else{
		while(!rightSW->read()){
			move(false);
		}

		int steps = 0;

		while (!leftSW->read()) {
			move(true);
			steps++;
		}

		for(int i = 0; i < 18; i++){
			move(false);
		}
		steps = steps-36;
		bool isLeft = false;
		bool finish = false;
		while(!finish){
			for(int i = 0; i < steps; i++ ){
				if(leftSW->read() || rightSW->read()){
					vTaskDelay(1000);
					if(leftSW->read() && rightSW->read()){
						finish = true;
						break;
					}else{
						i-=1;
						while(leftSW->read() || rightSW->read()){stop();}
					}
				}else{
					move(isLeft);
				}
			}
			isLeft = !isLeft;
		}
	}
}

static void vLEDTask(void *pvParameters) {
	Board_LED_Set(2, false);
	rightSW = new DigitalIoPin(0, 28, DigitalIoPin::pullup, true);		//Boundary1 at motor
	leftSW = new DigitalIoPin(0, 27, DigitalIoPin::pullup, true);		//Boundary2 opposite from motor

	while (1) {
		if( leftSW->read() || rightSW->read() ){
			Board_LED_Toggle(2);
			vTaskDelay(200);
		}else{
			Board_LED_Set(2, false);
			xSemaphoreGive(binary);
			while(!(leftSW->read() && rightSW->read())){
				if( leftSW->read()){
					Board_LED_Set(0,true);
					vTaskDelay(500);
					Board_LED_Set(0,false);
					vTaskDelay(500);
				}else if( rightSW->read()){
					Board_LED_Set(1,true);
					vTaskDelay(500);
					Board_LED_Set(1,false);
					vTaskDelay(500);
				}
			}

		}
	}
}


/***********************************************/

/*****************************************************************************
 * Public functions
 ****************************************************************************/

// the following is required if runtime statistics are to be collected
extern "C" {

void vConfigureTimerForRunTimeStats( void ) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}

}
// end runtime statictics collection

/**
 * @brief	main routine for FreeRTOS blinky example
 * @return	Nothing, function should not exit
 */

int main(void)
{
	prvSetupHardware();
	binary = xSemaphoreCreateBinary();
	xTaskCreate(vLEDTask, "vTaskLED",
				configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
				(TaskHandle_t *) NULL);
	xTaskCreate(vMotorTask, "vTaskMotor",
				configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
				(TaskHandle_t *) NULL);

	// Start the scheduler
	vTaskStartScheduler();

	// Should never arrive here
	return 1;
}
